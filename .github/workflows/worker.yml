name: 42sh_Checker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  EXECUTABLES: "42sh"
  MIRROR_URL: "git@github.com:EpitechPromo2028/B-PSU-200-MPL-2-1-42sh-elias-josue.hajjar-llauquen.git"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    if: github.repository != 'git@github.com:EpitechPromo2028/B-PSU-200-MPL-2-1-42sh-elias-josue.hajjar-llauquen.git'
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check.sh script
        run: check.sh $(pwd) $(pwd)
      - name: Coding style check
        run: |
          if [ -s coding-style-reports.log ]; then
            while IFS= read -r line
            do
              FILE=$(echo $line | cut -d':' -f1)
              LINE=$(echo $line | cut -d':' -f2)
              MSG=$(echo $line | cut -d':' -f3)
              echo "::error file=$FILE,line=$LINE::$MSG"
            done < coding-style-reports.log
            exit 1
          fi
          rm -f coding-style-reports.log
  
  valgrind_check:
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    steps:
      - uses: actions/checkout@v4
      - name: Check if 42sh exist
        run: |
          if [ ! -f Makefile ]; then
            echo "Error: There's no project."
            echo "::set-output name=cancel::true"
            exit 0
          fi
          exit 0
        id: check_project
      - name: Install Valgrind
        if: steps.check_project.outputs.cancel != 'true'
        run: sudo apt-get install valgrind -y
      - name: Run Valgrind
        if: steps.check_project.outputs.cancel != 'true'
        run: echo -e "ls" > valgrind --error-exitcode=1 --leak-check=full ./42sh
        timeout-minutes: 2

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [valgrind_check]
    if: ${{ needs.valgrind_check.result == 'success' }}
    container:
      image: epitechcontent/epitest-docker:latest
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4
      - name: Check if 42sh exist
        run: |
          if [ ! -f Makefile ]; then
            echo "Error: There's no project."
            echo "::set-output name=cancel::true"
            exit 0
          fi
          exit 0
        id: check_project
      - name: Copilation test
        if: steps.check_project.outputs.cancel != 'true'
        run: make
        timeout-minutes: 2
      - name: Clean
        if: steps.check_project.outputs.cancel != 'true'
        run: make clean
      - name: Execution test
        if: steps.check_project.outputs.cancel != 'true'
        run: |
          for file in $EXECUTABLES; do
            if [ ! -x "$file" ]; then
              echo "Error: $file is either missing or not executable."
            exit 1
          fi
            exit 0
          done

  run_tests:
    needs: [check_program_compilation]
    if: ${{ needs.check_program_compilation.result == 'success' }} && canceled() != 'true'
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker:latest
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v4
      - name: Check if 42sh exist
        run: |
          if [ ! -f Makefile ]; then
            echo "Error: There's no project."
            echo "::set-output name=cancel::true"
            exit 0
          fi
          exit 0
        id: check_project
      - name: Bonus test
        if: steps.check_project.outputs.cancel != 'true'
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: [check_coding_style]
    #if: ${{ needs.run_tests.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}